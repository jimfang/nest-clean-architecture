# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  pre-build-check:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/node:20.5.0
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: node --version
      - run:
          name: "installation step"
          command: "yarn install"
      - run: yarn test:unit 

  intergate-test-suite:
    docker:
      - image: cimg/node:20.5.0
    steps:
      - checkout
      - run: yarn install
      - run: yarn start
      - run: yarn docker:up
      - run: yarn docker:inte
      - run: yarn test:e2e

  build-docker-image:
      # Use the official CircleCI Node.js image as the primary container for running the job
    docker:
      - image: circleci/node:lts

    # Define the steps for the job
    steps:
      # Checkout the code from your repository
      - checkout

      # Install any Node.js dependencies (if required)
      - run:
          name: Install Dependencies
          command: npm install

      # Build the Docker image
      - run:
          name: Build Docker Image
          command: |
            # Replace 'your-image-name' with the desired name for your Docker image
            # Replace 'your-dockerfile-name' with the name of your Dockerfile if it's not named 'Dockerfile'
            docker build -t app-mesh-test .

      # (Optional) Push the Docker image to a container registry (e.g., Docker Hub)
      # You'll need to set up environment variables for your registry credentials
      # - run:
      #     name: Push Docker Image
      #     command: |
      #       echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      #       docker push your-image-name
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  pre-build-workflow:
    jobs:
      - pre-build-check

  build_and_push:
    # Trigger this workflow when changes are pushed to the specified branch (e.g., main or master)  
    # on:
    #   branches:
    #     only:
    #       - main
    jobs:
      # Run the build_docker_image job when the workflow is triggered
      - build-docker-image
